package com.ctw.functional;

import java.util.*;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;

//Class 6 - Java Functional Programming
public class JavaStream {


   final static List<String> numbers = Arrays.asList("43", "21", "54", "89", "137", "142", "751", "89", "137");
   final static List<String> words = Arrays.asList("Java", "FS", "Academy", "CTW", "BMW", "/", " - ");

    public static void main(String[] args) {
        System.out.println("Exercise 1 : " + filter(words));
        System.out.println("Exercise 4 : " + funcComp());
        System.out.println("Exercise 5 : " + hoFunc());
    }

    public static Predicate<String> isAlpgabetic = str -> str.chars().allMatch(Character::isAlphabetic);
    //Exercise 1
    public static List<String> filter(List<String> list) {
        List<String> result = new ArrayList<>();
        for (String str : list) {
            if (str.matches("[a-zA-Z]+")) {
                result.add(str.toUpperCase());
            }
        }
        return result;
    }
    //Exercise 1 with Streams
    public static List<String> filter(){
        return words.stream()
                .map(Utils::stringToUpperCase)
                .toList();

    }
    //Exercise 2

    public static Function<Integer, String> groupEvenandOdd = num -> num % 2 == 0 ? "even" : "odd";

    public Map<Boolean, Integer> collectorsAPI() {

        return numbers.stream()
                .map(Integer::parseInt)
                .distinct()
                .collect(getPartitioningBy());
    }
    //Generated by "Generate-Extract method"
    private static Collector<Integer, ?, Map<Boolean, Integer>> getPartitioningBy() {
        return Collectors.partitioningBy(num -> num % 2 == 0
                ,
                Collectors.summingInt(Integer::intValue)
        );
    }

    //Exercise 3
    public static void exploringOptional(){
        String str = "Java Fs";
        Optional<String> optionalStr = Optional.of(str);
        Optional<String> optionalNull = Optional.ofNullable(null);
        System.out.println(optionalNull.isEmpty());
        System.out.println(optionalNull.orElse("Fallback"));
        Optional<Integer> optionalLength = optionalStr.map(String::length);
        System.out.println(optionalLength);
    }
    public static UnaryOperator<String> uppercaseAndLength = value -> "(" + value.toUpperCase().length() + ")";
    //Exercise 4
    public static List<String> funcComp(){
        List<String> result = words.stream()
                .filter(isAlpgabetic)
                .map(uppercaseAndLength)
                .toList();
        return result;
    }
    //Exercise 5
    public static List<Integer> hoFunc(){
        List<String> numbers = Arrays.asList("43", "21", "54", "89", "137", "142", "751", "89", "137");
        return numbers.stream()
                .map(Utils::squareTheValue)
                .toList();
    }

    public static class Utils {

        public static Integer squareTheValue(String value) {
            Integer num = Integer.parseInt(value);
            return num * num;
        }

        public static String uppercaseAndLength(String value) {
            return "(" + value.toUpperCase().length() + ")";
        }

        public static String stringToUpperCase(String  text){
            return text.toUpperCase();
        }

        public static boolean alphabeticFilter(String text){
            return text.chars().allMatch(Character::isAlphabetic);
        }

    }

}


